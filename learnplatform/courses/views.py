from django.contrib.auth.decorators import login_required
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib import messages
from django.views.decorators.http import require_POST
from django.db.models import Q
from django.http import HttpResponse

from .forms import CourseForm, LessonForm
from .models import Course, Lesson
from quizzes.models import QuizAttempt, RetakeRequest
import openpyxl


@login_required
def export_grades_excel(request, course_id):
    course = get_object_or_404(Course, id=course_id)

    if not request.user.is_teacher() or course.teacher != request.user:
        messages.warning(request, "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        return redirect('users:cabinet')

    lessons = course.lessons.order_by('order')
    quizzes = {lesson.id: lesson.quiz for lesson in lessons if hasattr(lesson, 'quiz')}
    students = course.students.all()

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Excel-—Ñ–∞–π–ª—É
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = f"{course.title[:25]}"

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    headers = ['–°—Ç—É–¥–µ–Ω—Ç']
    headers += [lesson.title for lesson in lessons if lesson.quiz]
    ws.append(headers)

    # –î–∞–Ω—ñ –ø–æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö
    for student in students:
        row = [student.username]
        for lesson_id in quizzes:
            quiz = quizzes[lesson_id]
            attempt = QuizAttempt.objects.filter(student=student, quiz=quiz).first()
            score = f"{attempt.score}%" if attempt else "‚Äî"
            row.append(score)
        ws.append(row)

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —è–∫ —Ñ–∞–π–ª
    response = HttpResponse(
        content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )
    response['Content-Disposition'] = f'attachment; filename="{course.title}_—É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å.xlsx"'
    wb.save(response)
    return response


@login_required
def available_courses_view(request):
    if not request.user.is_student():
        messages.warning(request, "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        return redirect('users:cabinet')

    courses = Course.objects.exclude(students=request.user)

    return render(request, 'courses/available_courses.html', {
        'courses': courses
    })


@login_required
@require_POST
def enroll_view(request, course_id):
    course = get_object_or_404(Course, id=course_id)

    if request.user.is_student():
        course.students.add(request.user)
        messages.success(request, f'–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ –∫—É—Ä—Å "{course.title}".')
    else:
        messages.error(request, "–õ–∏—à–µ —Å—Ç—É–¥–µ–Ω—Ç–∏ –º–æ–∂—É—Ç—å –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏—Å—è –Ω–∞ –∫—É—Ä—Å–∏.")

    return redirect('courses:detail', course_id=course.id)


@login_required
def lesson_detail_view(request, course_id, lesson_id):
    course = get_object_or_404(Course, id=course_id)
    lesson = get_object_or_404(course.lessons, id=lesson_id)

    if request.user.is_teacher():
        if course.teacher != request.user:
            messages.warning(request, "–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ —É—Ä–æ–∫—É.")
            return redirect('users:cabinet')
    else:
        if request.user not in course.students.all():
            messages.warning(request, "–í–∏ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Ü–µ–π –∫—É—Ä—Å.")
            return redirect('users:cabinet')

    retake = None
    if request.user.is_student():
        try:
            retake = RetakeRequest.objects.get(student=request.user, quiz=lesson.quiz)
        except RetakeRequest.DoesNotExist:
            pass

    return render(request, 'courses/lesson_detail.html', {
        'course': course,
        'lesson': lesson,
        'request_already_sent': retake and not retake.approved,
    })


@login_required
def course_detail_view(request, course_id):
    course = get_object_or_404(Course, id=course_id)

    # üîê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É
    if request.user.is_teacher():
        if course.teacher != request.user:
            messages.warning(request, "–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –∫—É—Ä—Å—É.")
            return redirect('users:cabinet')
    else:
        if request.user not in course.students.all():
            messages.warning(request, "–í–∏ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Ü–µ–π –∫—É—Ä—Å.")
            return redirect('users:cabinet')

    lessons = course.lessons.order_by('order')

    # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–ª—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    gradebook = []
    quiz_lessons = [lesson for lesson in lessons if getattr(lesson, 'quiz', None)]

    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –≤–∏–∫–ª–∞–¥–∞—á–∞
    if request.user.is_teacher():
        # –ó–∞–ø–∏—Ç–∏ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É —Å–ø—Ä–æ–±—É (–Ω–µ–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω—ñ)
        retake_requests = RetakeRequest.objects.filter(
            quiz__lesson__in=lessons,
            approved=False
        ).select_related('quiz', 'student')
        retake_map = {
            f"{req.student.id}_{req.quiz.id}": req.id
            for req in retake_requests
        }

        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –∫—É—Ä—Å—É
        students = course.students.all()

        # –ü–æ–ø–µ—Ä–µ–¥–Ω—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø—Ä–æ–± –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç—É –¥–ª—è –≤—Å—ñ—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —Ç–∞ —Ç–µ—Å—Ç—ñ–≤
        quizzes = [lesson.quiz for lesson in quiz_lessons]
        attempts = QuizAttempt.objects.filter(
            student__in=students,
            quiz__in=quizzes
        ).select_related('student', 'quiz')
        attempt_map = {
            (attempt.student.id, attempt.quiz.id): attempt
            for attempt in attempts
        }

        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –∂—É—Ä–Ω–∞–ª—É –æ—Ü—ñ–Ω–æ–∫
        for student in students:
            lesson_scores = []
            for lesson in quiz_lessons:
                quiz = lesson.quiz
                attempt = attempt_map.get((student.id, quiz.id))
                score = attempt.score if attempt else None
                # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –∫–ª—é—á–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏
                retake_key = f"{student.id}_{quiz.id}"
                lesson_scores.append({
                    "lesson": lesson,
                    "score": score,
                    "retake_request_id": retake_map.get(retake_key)
                })
            gradebook.append({
                "student": student,
                "lesson_scores": lesson_scores,
            })
    else:
        # –î–ª—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–¥–∞—Ç–∏ —ñ–Ω—à–∏–π –Ω–∞–±—ñ—Ä –¥–∞–Ω–∏—Ö –∞–±–æ –∑–∞–ª–∏—à–∏—Ç–∏ gradebook –ø–æ—Ä–æ–∂–Ω—ñ–º
        retake_map = {}

    return render(request, 'courses/course_detail.html', {
        'course': course,
        'lessons': lessons,
        'quiz_lessons': quiz_lessons,
        'gradebook': gradebook,
    })


@login_required
def create_lesson_view(request, course_id):
    course = get_object_or_404(Course, id=course_id)

    if not request.user.is_teacher() or course.teacher != request.user:
        messages.warning(request, "–õ–∏—à–µ –≤–∏–∫–ª–∞–¥–∞—á—ñ –º–æ–∂—É—Ç—å –¥–æ–¥–∞–≤–∞—Ç–∏ —É—Ä–æ–∫–∏.")
        return redirect('users:cabinet')

    if request.method == 'POST':
        form = LessonForm(request.POST)
        if form.is_valid():
            lesson = form.save(commit=False)
            lesson.course = course
            lesson.save()
            messages.success(request, f'–£—Ä–æ–∫ "{lesson.title}" —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ.')
            return redirect('users:cabinet')
    else:
        form = LessonForm()

    return render(request, 'courses/create_lesson.html', {
        'form': form,
        'course': course
    })


@login_required
def create_course_view(request):
    if not request.user.is_teacher():
        messages.warning(request, "–õ–∏—à–µ –≤–∏–∫–ª–∞–¥–∞—á—ñ –º–æ–∂—É—Ç—å —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∫—É—Ä—Å–∏.")
        return redirect('users:cabinet')

    if request.method == 'POST':
        form = CourseForm(request.POST)
        if form.is_valid():
            course = form.save(commit=False)
            course.teacher = request.user
            course.save()
            messages.success(request, f'–ö—É—Ä—Å "{course.title}" —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ.')
            return redirect('users:cabinet')
    else:
        form = CourseForm()

    return render(request, 'courses/create_course.html', {'form': form})
